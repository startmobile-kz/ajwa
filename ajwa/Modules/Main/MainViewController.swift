//
//  MainViewController.swift
//  alamofire
//
//  Created by Kuanysh al-Khattab Auyelgazy on 06.11.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MainDisplayLogic: AnyObject {
    func displaySomething(viewModel: Main.Something.ViewModel)
}

enum MainPageFigmaSizes {
    static let figmaScreenWidth: CGFloat = 390
    static let mosqueImageViewFigmaWidth: CGFloat = 141
    static let particularNamazViewFigmaWidth: CGFloat = 170
    static let remainingTimeViewFigmaWidth: CGFloat = 170
    static let allPrayersViewFigmaWidth: CGFloat = 350
    static let allPrayersViewFigmaHeight: CGFloat = 347
}

final class MainViewController: UIViewController, MainDisplayLogic {

    var interactor: MainBusinessLogic?
    var router: (NSObjectProtocol & MainRoutingLogic & MainDataPassing)?

    // MARK: - UI
    private lazy var headerView: MainHeaderView = {
        let view = MainHeaderView()
        return view
    }()

    private lazy var firstMosqueImageView: UIImageView = {
        let imageView = UIImageView()
        imageView.image = AppImage.mosque_1.uiImage
        return imageView
    }()

    private lazy var secondMosqueImageView: UIImageView = {
        let imageView = UIImageView()
        imageView.image = AppImage.mosque_2.uiImage
        return imageView
    }()

    private lazy var particularNamazView = ParticularNamazView()

    private lazy var remainingTimeView = RemainingTimeView()

    private lazy var allPrayersView = AllPrayersView()

    private lazy var bottomView = MainBottomView()

    var timer = Timer()

    // MARK: - Lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()

        loadData()
        updateEveryMinute()

        setupViews()
        setupConstraints()
    }

    // MARK: - SetupViews

    private func setupViews() {
        view.backgroundColor = AppColor.background.uiColor

        [headerView, firstMosqueImageView, secondMosqueImageView, particularNamazView, remainingTimeView, allPrayersView, bottomView].forEach {
            view.addSubview($0)
        }
    }

    // MARK: - SetupConstraints

    private func setupConstraints() {
        let mosqueImageAdaptivePercentage: CGFloat = MainPageFigmaSizes.mosqueImageViewFigmaWidth / MainPageFigmaSizes.figmaScreenWidth
        let prayerInfoViewsAdaptivePercentage: CGFloat = MainPageFigmaSizes.particularNamazViewFigmaWidth / MainPageFigmaSizes.figmaScreenWidth

        headerView.snp.makeConstraints { make in
            make.top.equalTo(self.view.safeAreaLayoutGuide.snp.top)
            make.leading.equalToSuperview().offset(20)
            make.trailing.equalToSuperview().offset(-20)
        }

        firstMosqueImageView.snp.makeConstraints { make in
            make.top.equalTo(headerView.snp.bottom).offset(30)
            make.leading.equalTo(headerView)
            make.width.equalTo(view.frame.width * mosqueImageAdaptivePercentage)
            make.height.equalTo(124.47)
        }

        secondMosqueImageView.snp.makeConstraints { make in
            make.top.equalTo(headerView.snp.bottom).offset(30)
            make.trailing.equalTo(headerView)
            make.width.equalTo(view.frame.width * mosqueImageAdaptivePercentage)
            make.height.equalTo(124.47)
        }

        particularNamazView.snp.makeConstraints { make in
            make.top.equalTo(firstMosqueImageView).offset(113.65)
            make.leading.equalTo(headerView)
            make.width.equalTo(view.frame.width * prayerInfoViewsAdaptivePercentage)
            make.height.equalTo(164)
        }

        remainingTimeView.snp.makeConstraints { make in
            make.top.equalTo(particularNamazView)
            make.trailing.equalTo(headerView)
            make.width.equalTo(view.frame.width * prayerInfoViewsAdaptivePercentage)
            make.height.equalTo(164)
        }

        allPrayersView.snp.makeConstraints { make in
            make.top.equalTo(particularNamazView.snp.bottom).offset(16)
            make.leading.equalTo(headerView)
            make.trailing.equalTo(headerView)
            make.height.equalTo(347)
        }

        bottomView.snp.makeConstraints { make in
            make.top.equalTo(allPrayersView.snp.bottom).offset(18)
            make.leading.equalToSuperview().offset(20)
            make.trailing.equalToSuperview().offset(-20)
            make.height.equalTo(54)
            make.bottom.equalToSuperview().offset(-29)
        }
    }

    // MARK: - Action

    private func updateEveryMinute() {
        timer = Timer.scheduledTimer(withTimeInterval: 60, repeats: true, block: { _ in
            self.loadData()
        })
    }

    private func loadData() {
        guard let url = URL(string: "https://api.muftyat.kz/prayer-times/2023/51.133333/71.433333?format=json") else { fatalError("Invalid URL") }

        NetworkManager.shared.getRequest(fromURL: url) { (result: Result<NamazDetail, Error>) in
            switch result {
            case .success(let data):
                let today = self.getTodayDate()
                for day in data.result {
                    if day.date == today {
                        self.particularNamazView.update(viewModel: day)
                        self.remainingTimeView.update(with: day)
                        self.allPrayersView.update(with: day)
                        break
                    }
                }
            case .failure(let error):
                print("we got error description: \(error.localizedDescription)")
            }
        }
    }

    private func getTodayDate() -> String {
        let todayDate = Date()
        let formatter = DateFormatter()
        formatter.dateFormat = "yyyy-MM-dd"
        let result = formatter.string(from: todayDate)
        return result
    }

    func doSomething() {
        let request = Main.Something.Request()
        interactor?.doSomething(request: request)
    }

    func displaySomething(viewModel: Main.Something.ViewModel) {
        //nameTextField.text = viewModel.name
    }
}
