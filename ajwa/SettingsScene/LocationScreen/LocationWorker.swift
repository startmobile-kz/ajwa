//
//  LocationWorker.swift
//  ajwa
//
//  Created by Aisaule Sibatova on 23.08.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreLocation

final class LocationWorker {

    
        func fetchCities(completion: @escaping (City?) -> Void) {
            if let url = Bundle.main.url(forResource: "states", withExtension: "json") {
                do {
                    let data = try Data(contentsOf: url)
                    let decoder = JSONDecoder()
                    let jsonData = try decoder.decode(City.self, from: data)
                    completion(jsonData)
                } catch {
                    print("error:\(error)")
                    completion(nil)
                }
            }
        }
    

    
    
    func fetchLocation() -> [Location.ModelType.ViewModel] {
        
        let countries = NSLocale.isoCountryCodes.map { (code:String) -> String in
            let id = NSLocale.localeIdentifier(fromComponents: [NSLocale.Key.countryCode.rawValue: code])
            return NSLocale(localeIdentifier: "en_US").displayName(forKey: NSLocale.Key.identifier, value: id) ?? "Country not found for code: \(code)"
        }
        

        var cities = [String]()
        
        countries.enumerated().forEach{ iterator in
            
            if iterator.element == "Kazakhstan" {
                cities = ["Atyrau" , "Almaty", "Astana" , "Kizilorda" , "Kokshetau", "Uralsk"]
            }
    
        }
        
        
        let location = [
            Location.ModelType.ViewModel(locationList: Country(states: countries.sorted()), isExpanded: false),
            Location.ModelType.ViewModel(locationList: City(states: cities.sorted(), utcTimezone: "UTC +6:00"), isExpanded: false)
        
        ]
                                                                          
                           
        return location
        
    }
}
